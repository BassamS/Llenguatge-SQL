DROP DATABASE IF EXISTS tienda;
CREATE DATABASE tienda CHARACTER SET utf8mb4;
USE tienda;

CREATE TABLE fabricante (
  codigo INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL
);

CREATE TABLE producto (
  codigo INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
  nombre VARCHAR(100) NOT NULL,
  precio DOUBLE NOT NULL,
  codigo_fabricante INT UNSIGNED NOT NULL,
  FOREIGN KEY (codigo_fabricante) REFERENCES fabricante(codigo)
);

INSERT INTO fabricante VALUES(1, 'Asus');
INSERT INTO fabricante VALUES(2, 'Lenovo');
INSERT INTO fabricante VALUES(3, 'Hewlett-Packard');
INSERT INTO fabricante VALUES(4, 'Samsung');
INSERT INTO fabricante VALUES(5, 'Seagate');
INSERT INTO fabricante VALUES(6, 'Crucial');
INSERT INTO fabricante VALUES(7, 'Gigabyte');
INSERT INTO fabricante VALUES(8, 'Huawei');
INSERT INTO fabricante VALUES(9, 'Xiaomi');

INSERT INTO producto VALUES(1, 'Disco duro SATA3 1TB', 86.99, 5);
INSERT INTO producto VALUES(2, 'Memoria RAM DDR4 8GB', 120, 6);
INSERT INTO producto VALUES(3, 'Disco SSD 1 TB', 150.99, 4);
INSERT INTO producto VALUES(4, 'GeForce GTX 1050Ti', 185, 7);
INSERT INTO producto VALUES(5, 'GeForce GTX 1080 Xtreme', 755, 6);
INSERT INTO producto VALUES(6, 'Monitor 24 LED Full HD', 202, 1);
INSERT INTO producto VALUES(7, 'Monitor 27 LED Full HD', 245.99, 1);
INSERT INTO producto VALUES(8, 'Portátil Yoga 520', 559, 2);
INSERT INTO producto VALUES(9, 'Portátil Ideapd 320', 444, 2);
INSERT INTO producto VALUES(10, 'Impresora HP Deskjet 3720', 59.99, 3);
INSERT INTO producto VALUES(11, 'Impresora HP Laserjet Pro M26nw', 180, 3);


-- Consultas sobre una tabla


-- Q1
SELECT producto.nombre FROM producto;

-- Q2
SELECT producto.nombre, producto.precio FROM producto;

-- Q3
SELECT * FROM producto;

-- Q4
ALTER TABLE producto ADD precio_€ DOUBLE;

UPDATE producto SET precio_€=79.34 WHERE producto.codigo=1; 
UPDATE producto SET precio_€=109.45 WHERE producto.codigo=2;
UPDATE producto SET precio_€=137.72 WHERE producto.codigo=3;
UPDATE producto SET precio_€=168.74 WHERE producto.codigo=4;
UPDATE producto SET precio_€=688.65 WHERE producto.codigo=5;
UPDATE producto SET precio_€=184.25 WHERE producto.codigo=6;
UPDATE producto SET precio_€=224.37 WHERE producto.codigo=7;
UPDATE producto SET precio_€=509.87 WHERE producto.codigo=8;
UPDATE producto SET precio_€=404.98 WHERE producto.codigo=9;
UPDATE producto SET precio_€=54.72 WHERE producto.codigo=10;
UPDATE producto SET precio_€=164.18 WHERE producto.codigo=11;

ALTER TABLE producto MODIFY precio_€ DOUBLE AFTER precio_$;

ALTER TABLE producto CHANGE precio precio_$ DOUBLE;

-- Q6
SELECT UPPER(nombre), precio_$, precio_€ FROM producto;

-- Q7
SELECT LOWER(nombre), precio_$, precio_€ FROM producto;

-- Q8
SELECT nombre, UPPER(LEFT(nombre, 2)) FROM fabricante;

-- Q9
SELECT nombre, ROUND(precio_€) FROM producto;

-- Q10
SELECT nombre, FLOOR(precio_€) FROM producto;

-- Q11
SELECT codigo_fabricante FROM producto;

-- Q12
SELECT DISTINCT codigo_fabricante FROM producto;

-- Q13
SELECT nombre FROM fabricante ORDER BY nombre ASC;

-- Q14
SELECT nombre FROM fabricante ORDER BY nombre DESC;

-- Q15
SELECT nombre, precio_€
FROM producto
ORDER BY nombre, precio_€ DESC;

-- Q16
SELECT * FROM fabricante ORDER BY codigo LIMIT 5;

-- Q17
SELECT * FROM fabricante ORDER BY codigo LIMIT 2 OFFSET 3;

-- Q18
SELECT nombre, precio_€ FROM producto ORDER BY precio_$  ASC LIMIT 1;

-- Q19
SELECT nombre, precio_€ FROM producto ORDER BY precio_$  DESC LIMIT 1;

-- Q20
SELECT nombre, codigo_fabricante FROM producto WHERE codigo_fabricante = 2;

-- Q21
SELECT nombre, precio_€ FROM producto WHERE precio_€ <= 120;

-- Q22
SELECT nombre, precio_€ FROM producto WHERE precio_€ >= 400;

-- Q23
SELECT nombre, precio_€ FROM producto WHERE precio_€ <= 400;

-- Q24
SELECT nombre, precio_€ FROM producto WHERE precio_€ >= 80 AND precio_$ <= 300;

-- Q25
SELECT nombre, precio_€ FROM producto WHERE precio_€ BETWEEN 60 AND 200;

-- Q26
SELECT nombre, precio_€ FROM producto WHERE precio_€ >200 AND codigo_fabricante = 6;

-- Q27
SELECT nombre, precio_€ FROM producto WHERE codigo_fabricante = 1 OR codigo_fabricante = 3 OR codigo_fabricante = 5;

-- Q28
SELECT nombre, codigo FROM producto WHERE codigo IN (1, 3) OR codigo = 5;

-- Q29
SELECT nombre, precio_€ * 100 AS céntimos FROM producto;

-- Q30
SELECT nombre FROM fabricante WHERE nombre LIKE 'S%';

-- Q31
SELECT nombre FROM fabricante WHERE nombre LIKE '%e';

-- Q32
SELECT nombre FROM fabricante WHERE nombre LIKE '%W%';

-- Q33
SELECT nombre FROM fabricante WHERE char_length(nombre) = 4;

-- Q34
SELECT nombre FROM producto WHERE nombre LIKE '%Portátil%';

-- Q35
SELECT nombre, precio_€ FROM producto WHERE nombre LIKE '%Monitor%' AND precio_€ < 215;

-- Q36
SELECT nombre, precio_€ FROM producto WHERE precio_€ >= 180 ORDER BY precio_€ DESC, nombre ASC;


-- 1.1.4 Consultas multitabla (Composición interna)


-- Q1
SELECT producto.nombre, producto.precio_$, fabricante.nombre
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo;

-- Q 2
SELECT producto.nombre, producto.precio_$, fabricante.nombre
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo
ORDER BY fabricante.nombre ASC;

-- Q 3
SELECT producto.codigo, producto.nombre, fabricante.codigo, fabricante.nombre
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo;

-- Q 4
SELECT producto.nombre, MIN(producto.precio_$), fabricante.nombre
FROM producto, fabricante;

-- Q 5
SELECT producto.nombre, Max(producto.precio_$), fabricante.nombre
FROM producto, fabricante;

-- Q 6
SELECT producto.nombre FROM producto WHERE codigo_fabricante = 2;

-- Q 7
SELECT nombre
FROM producto
WHERE codigo_fabricante = 6 
AND precio_$ > 200;

-- Q 8
SELECT producto.nombre, fabricante.nombre
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo
AND (
	fabricante.nombre='Asus'
    OR fabricante.nombre='Hewlett-Packard'
    OR fabricante.nombre='Seagate'
);

-- Q 9
SELECT producto.nombre, fabricante.nombre
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo
AND producto.codigo_fabricante
IN(1, 3, 5);

-- Q 10
SELECT producto.nombre, producto.precio_€
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo
AND fabricante.nombre LIKE '%e';

-- Q 11
SELECT producto.nombre, producto.precio_€
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo
AND fabricante.nombre LIKE '%W%';

-- Q 12
SELECT producto.nombre, producto.precio_€, fabricante.nombre
FROM producto, fabricante
WHERE codigo_fabricante=fabricante.codigo
AND precio_€ >= 180 ORDER BY precio_€ DESC, fabricante.nombre ASC;

-- Q 13
SELECT DISTINCT fabricante.codigo, fabricante.nombre
FROM fabricante, producto
WHERE codigo_fabricante=fabricante.codigo
AND producto.codigo_fabricante BETWEEN 1 AND 7;


-- 1.1.5 Consultas multitabla (Composición externa)


-- Q 1
SELECT fabricante.nombre, producto.nombre
FROM fabricante
LEFT JOIN producto
ON codigo_fabricante = fabricante.codigo;

-- Q 2
SELECT fabricante.nombre, producto.nombre
FROM fabricante
LEFT JOIN producto
ON codigo_fabricante = fabricante.codigo
WHERE producto.nombre IS NULL;

-- Q3
-- No, (codigo_fabricante NOT NULL)


-- Consultas resumen


-- Q 1
SELECT COUNT(producto.nombre) FROM producto;

-- Q 2
SELECT COUNT(fabricante.nombre) FROM fabricante;

-- Q 3
SELECT COUNT(DISTINCT producto.codigo_fabricante) FROM producto;

-- Q 4
SELECT AVG(producto.precio_€) FROM producto;

-- Q 5
SELECT MIN(producto.precio_€) FROM producto;

-- Q 6
SELECT MAX(producto.precio_€) FROM producto;

-- Q 7
SELECT producto.nombre, MIN(producto.precio_€) FROM producto;

-- Q 8
SELECT producto.nombre, MAX(producto.precio_€) FROM producto;

-- Q 9
SELECT SUM(producto.precio_€) FROM producto;

-- Q 10
SELECT COUNT(producto.nombre) FROM producto WHERE codigo_fabricante=1;

-- Q 11
SELECT AVG(producto.precio_€) FROM producto WHERE codigo_fabricante=1;

-- Q 12
SELECT MIN(producto.precio_€) FROM producto WHERE codigo_fabricante=1;

-- Q 13
SELECT MAX(producto.precio_€) FROM producto WHERE codigo_fabricante=1;

-- Q 14
SELECT SUM(producto.precio_€) FROM producto WHERE codigo_fabricante=1;

-- Q 15
SELECT MAX(producto.precio_€),
MIN(producto.precio_€),
AVG(producto.precio_€),
SUM(producto.precio_€)
FROM producto  WHERE codigo_fabricante=6;

-- Q 16
SELECT fabricante.nombre, COUNT(codigo_fabricante)
FROM producto
RIGHT OUTER JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY codigo_fabricante, fabricante.codigo
ORDER BY fabricante.codigo, codigo_fabricante DESC;

-- Q 17
SELECT fabricante.nombre,
MAX(producto.precio_€),
MIN(producto.precio_€),
AVG(producto.precio_€)
FROM producto
JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY codigo_fabricante, fabricante.codigo;

-- Q 18
SELECT fabricante.nombre,
MAX(producto.precio_€),
MIN(producto.precio_€),
AVG(producto.precio_€),
AVG(producto.precio_€) > 200
FROM producto
JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY producto.precio_€;

-- Q 19
SELECT fabricante.nombre,
MAX(producto.precio_€),
MIN(producto.precio_€),
AVG(producto.precio_€),
AVG(producto.precio_€) > 200
FROM producto
JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY producto.precio_€;

-- Q 20
SELECT COUNT(producto.codigo_fabricante)
FROM producto
WHERE producto.precio_€ >= 180;

-- Q 21
SELECT fabricante.nombre,
COUNT(producto.precio_€)
FROM producto, fabricante
WHERE codigo_fabricante = fabricante.codigo AND producto.precio_€ >= 180
GROUP BY codigo_fabricante;

-- Q 22
SELECT fabricante.nombre,
fabricante.codigo,
AVG(producto.precio_€)
FROM producto
JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY codigo_fabricante, fabricante.codigo;


-- Q 23
SELECT fabricante.nombre,
AVG(producto.precio_€)
FROM producto
JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY codigo_fabricante, fabricante.codigo;

-- Q 23
SELECT fabricante.nombre,
AVG(producto.precio_€)
FROM producto, fabricante
WHERE codigo_fabricante = fabricante.codigo AND producto.precio_€ >= 150
GROUP BY codigo_fabricante, fabricante.codigo;

-- Q 24
SELECT fabricante.nombre,
AVG(producto.precio_€)
FROM producto, fabricante
WHERE codigo_fabricante = fabricante.codigo AND producto.precio_€ >= 150
GROUP BY codigo_fabricante, fabricante.codigo;

-- Q 25
SELECT  fabricante.nombre, COUNT(codigo_fabricante) AS cnt
FROM producto
JOIN fabricante
ON codigo_fabricante = fabricante.codigo
GROUP BY `codigo_fabricante`
HAVING cnt >= 2;

-- Q 26
SELECT fabricante.nombre,
COUNT(producto.precio_€)
FROM producto, fabricante
WHERE codigo_fabricante = fabricante.codigo AND producto.precio_€ >= 220
GROUP BY codigo_fabricante, fabricante.codigo;

-- Q 27
SELECT fabricante.nombre,
COUNT(producto.precio_€)
FROM fabricante
LEFT JOIN producto
ON codigo_fabricante = fabricante.codigo AND producto.precio_€ >= 220
GROUP BY codigo_fabricante, fabricante.codigo;


-- Subconsultas (En la cláusula WHERE)


-- Q 1
SELECT producto.nombre
FROM producto
WHERE codigo_fabricante=2;

-- Q 2
SELECT * FROM producto WHERE producto.precio_€ = ALL
(SELECT MAX(producto.precio_€) FROM producto WHERE codigo_fabricante=2);

-- Q 3
SELECT producto.nombre, MAX(producto.precio_€)
FROM producto
WHERE codigo_fabricante=2;

-- Q 4
SELECT producto.nombre, MIN(producto.precio_€)
FROM producto
WHERE codigo_fabricante=3;

-- Q 5
SELECT * FROM producto WHERE precio_€ >= ALL
(SELECT producto.precio_€
FROM producto
WHERE codigo_fabricante=2);

-- Q 6
SELECT producto.nombre, producto.precio_€
FROM producto
WHERE producto.precio_€ > ANY
(SELECT AVG(producto.precio_€)
	FROM producto);


-- 7.2 Subconsultas con ALL y ANY


-- Q 8
  SELECT producto.nombre, producto.precio_€
  FROM producto
  WHERE producto.precio_€ >= ALL (SELECT producto.precio_€ FROM producto);

-- Q 9
  SELECT producto.nombre, producto.precio_€
  FROM producto
  WHERE producto.precio_€ <= ALL (SELECT producto.precio_€ FROM producto);  
  
-- Q 10
  SELECT fabricante.nombre, producto.nombre
  FROM fabricante, producto
  WHERE codigo_fabricante = fabricante.codigo > ALL
  (SELECT fabricante.nombre FROM fabricante);



-- Subconsultas con IN y NOT IN


  
-- Q 12
SELECT fabricante.nombre, producto.nombre
FROM fabricante
LEFT JOIN producto
ON codigo_fabricante = fabricante.codigo
AND producto.nombre IN (producto.nombre);

-- Q 13
SELECT fabricante.nombre
FROM fabricante
WHERE fabricante.codigo
NOT IN (SELECT producto.codigo_fabricante FROM producto);

-- Q 14
SELECT fabricante.nombre
FROM fabricante
WHERE EXISTS
	(SELECT *
	FROM producto
	WHERE codigo_fabricante = fabricante.codigo);

  -- Q 15
SELECT fabricante.nombre
FROM fabricante
WHERE NOT EXISTS
	(SELECT *
	FROM producto
	WHERE codigo_fabricante = fabricante.codigo);

  -- Q 16
SELECT fabricante.nombre, 
(SELECT MAX(producto.precio_€)
FROM producto
WHERE codigo_fabricante = fabricante.codigo)
FROM fabricante;

-- Q 17
SELECT fabricante.nombre,
COUNT(fabricante.codigo),
(SELECT AVG(producto.precio_€)
FROM producto
WHERE codigo_fabricante = fabricante.codigo)
FROM fabricante;

-- Q 18
SELECT producto.nombre, MAX(producto.precio_€),
(SELECT producto.precio_€
WHERE codigo_fabricante=2)
FROM producto;